import numpy as np
import matplotlib.pyplot as plt
import glob
import os

import matplotlib.animation as animation
from PIL import Image


# Cargar los datos
path = "/Users/matiasmontesinos/Simulations/fargo3d/outputs/fargo/"

# Datos de la grilla
Rmin = 0.4
Rmax = 3.0

# Cargar la grilla de la simulación
domain_x = np.genfromtxt(path + "domain_x.dat")
domain_y = np.genfromtxt(path + "domain_y.dat")[3:-3]

NX = len(domain_x) - 1
NY = len(domain_y) - 1

dr = (Rmax - Rmin) / NY

dens_out0 = np.fromfile(path + "gasdens0.dat").reshape(NY, NX)
dens_out10 = np.fromfile(path + "gasdens10.dat").reshape(NY, NX)
dens_out20 = np.fromfile(path + "gasdens20.dat").reshape(NY, NX)
dens_out40 = np.fromfile(path + "gasdens40.dat").reshape(NY, NX)

# Gráfica cortes 1D
def get_1D_values(Field):
    mean_values = []
    for i in range(NY):
        mean_value = np.mean(Field[i, :])
        mean_values.append(mean_value)
    mean_values = np.array(mean_values)
    return mean_values

# Datos 1D de gasdens
gasdens1D_0 = get_1D_values(dens_out0)
gasdens1D_10 = get_1D_values(dens_out10)
gasdens1D_20 = get_1D_values(dens_out20)
gasdens1D_40 = get_1D_values(dens_out40)

# Coordenada r
r_values = np.arange(Rmin, Rmax, dr)

# Configuración de los gráficos
plt.figure(figsize=(10, 6))
plt.plot(r_values, gasdens1D_0, '-', label='out 0', linewidth=2)
plt.plot(r_values, gasdens1D_10, '-', label='out 10', linewidth=2)
plt.plot(r_values, gasdens1D_20, '-', label='out 20', linewidth=2)
plt.plot(r_values, gasdens1D_40, '-', label='out 40', linewidth=2)
plt.xlabel('Radial Distance', fontsize=14)
plt.ylabel(r'Gas density [gr / cm$^2$]', fontsize=14)
plt.title('1D Radial Cuts of Gas Density', fontsize=16)
plt.legend(fontsize=12)
plt.grid(True)
plt.tight_layout()
plt.show()


def Grilla_XY():
    R = 0.5 * (domain_y[1:] + domain_y[:-1])
    Phi = 0.5 * (domain_x[1:] + domain_x[:-1])
    P, R = np.meshgrid(Phi, R)
    X, Y = R * np.cos(P), R * np.sin(P)
    return X, Y

X, Y = Grilla_XY()

plt.figure(figsize=(8, 8))
plt.pcolormesh(X, Y, np.log10(dens_out40), cmap='jet', shading='auto')
plt.colorbar(label='Log Gas Density [gr / cm$^2$]')
plt.xlabel('X [AU]', fontsize=14)
plt.ylabel('Y [AU]', fontsize=14)
plt.title('Gas Density Distribution', fontsize=16)
plt.axis('equal')
plt.tight_layout()
plt.show()


# Función para generar y guardar los plots 2D
def plot_2D_data(output_number, path, X, Y, NY, NX):
    dens_out = np.fromfile(path + f"gasdens{output_number}.dat").reshape(NY, NX)
    
    # Crear la carpeta si no existe
    output_dir = os.path.join(path, "gas_png")
    os.makedirs(output_dir, exist_ok=True)
    
    plt.figure(figsize=(8, 8))
    plt.pcolormesh(X, Y, np.log10(dens_out), cmap='jet', shading='auto', vmin=vmin, vmax=vmax)
    plt.colorbar(label='Log Gas Density [gr / cm$^2$]')
    plt.xlabel('X [AU]', fontsize=14)
    plt.ylabel('Y [AU]', fontsize=14)
    plt.title(f'Gas Density Distribution - Output {output_number}', fontsize=16)
    plt.axis('equal')
    plt.tight_layout()
    
    # Guardar el PNG en la carpeta especificada
    file_path = os.path.join(output_dir, f"output_{output_number:03d}.png")
    plt.savefig(file_path)
    plt.close()

# Identificar el número de outputs disponibles
output_files = glob.glob(path + "gasdens*.dat")
output_numbers =  sorted([int(f.split('gasdens')[-1].split('.dat')[0]) for f in output_files if f.split('gasdens')[-1].split('.dat')[0].isdigit()])

# Calcular vmin y vmax
vmin, vmax = None, None
for output_number in output_numbers:
    dens_out = np.fromfile(path + f"gasdens{output_number}.dat").reshape(NY, NX)
    log_dens_out = np.log10(dens_out)
    if vmin is None or vmax is None:
        vmin = log_dens_out.min()
        vmax = log_dens_out.max()
    else:
        vmin = min(vmin, log_dens_out.min())
        vmax = max(vmax, log_dens_out.max())

#vmin = dens_out40.min()
#vmax = dens_out40.max()

# Generar los plots para cada output
for output_number in output_numbers:
    plot_2D_data(output_number, path, X, Y, NY, NX)


### animar los pngs 
# Ruta donde están almacenados los archivos PNG

# Ruta donde están almacenados los archivos PNG
png_dir = "/Users/matiasmontesinos/Simulations/fargo3d/outputs/fargo/gas_png/"

# Obtener una lista de todos los archivos PNG
png_files = sorted(glob.glob(png_dir + "output_*.png"))

# Crear la figura para la animación
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111)

# Ocultar los ejes y eliminar los márgenes
ax.axis('off')
fig.subplots_adjust(left=0, right=1, top=1, bottom=0)

# Función para cargar las imágenes
def load_image(file):
    img = Image.open(file)
    return [plt.imshow(img, animated=True)]

# Crear la animación
frames = [load_image(file) for file in png_files]
ani = animation.ArtistAnimation(fig, frames, interval=200, repeat_delay=1000, blit=True)

# Guardar la animación en un archivo MP4
ani.save(png_dir + 'gas_density_animation_from_png.mp4', fps=5, extra_args=['-vcodec', 'libx264'])

plt.show()


#interval: Especifica el tiempo entre fotogramas en milisegundos. Un interval más alto hace que la animación vaya más despacio, mientras que un interval más bajo hace que la animación vaya más rápido.
#Ejemplo: Un interval de 200 ms significa que hay 200 milisegundos entre cada fotograma.

#fps (frames per second): Especifica el número de fotogramas por segundo en el archivo de video resultante. Un fps más alto hace que la animación parezca más suave, mientras que un fps más bajo puede hacer que la animación se vea entrecortada.
#Ejemplo: Un fps de 10 significa que el video mostrará 10 fotogramas por segundo.


